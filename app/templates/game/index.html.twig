{% extends 'base.html.twig' %}

{% block title %}Puzzle {{ puzzle.id }} - Word Puzzle Game{% endblock %}

{% block stylesheets %}
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        
        h1 {
            text-align: center;
            color: #333;
        }
        
        .user-info {
            text-align: right;
            margin-bottom: 20px;
        }
        
        .logout-btn {
            background-color: #dc3545;
            color: white;
            padding: 8px 16px;
            text-decoration: none;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .back-btn {
            background-color: #6c757d;
            color: white;
            padding: 8px 16px;
            text-decoration: none;
            border-radius: 4px;
            font-size: 14px;
            margin-right: 10px;
        }
        
        .game-container {
            background-color: #f8f9fa;
            padding: 30px;
            border-radius: 8px;
            border: 4px solid green;
            margin-top: 20px;
        }
        
        .puzzle-info {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .puzzle-title {
            font-size: 24px;
            color: #333;
            margin-bottom: 10px;
        }
        
        .puzzle-description {
            color: #666;
            font-size: 16px;
            margin-bottom: 20px;
        }
        
        .letter-pool-display {
            background-color: #e9ecef;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 30px;
        }
        
        .game-area {
            text-align: center;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            margin-top: 20px;
        }
        
        .word-input-section {
            margin: 30px 0;
        }
        
        .word-input {
            padding: 12px;
            font-size: 18px;
            border: 2px solid #ddd;
            border-radius: 8px;
            width: 300px;
            text-align: center;
            margin-right: 10px;
        }
        
        .word-input:focus {
            outline: none;
            border-color: #007bff;
        }
        
        .submit-btn {
            padding: 12px 24px;
            font-size: 16px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .submit-btn:hover {
            background-color: #218838;
        }
        
        .submit-btn:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }
        
        .message {
            margin: 20px 0;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
        }
        
        .message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .score {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            margin: 20px 0;
        }
        
        .used-words {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }
        
        .used-words h4 {
            margin: 0 0 10px 0;
            color: #333;
        }
        
        .used-word {
            display: inline-block;
            background-color: #28a745;
            color: white;
            padding: 5px 10px;
            margin: 5px;
            border-radius: 15px;
            font-size: 14px;
        }
        
        .finish-puzzle-section {
            margin-top: 30px;
            text-align: center;
        }
        
        .finish-puzzle-btn {
            padding: 15px 30px;
            font-size: 18px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .finish-puzzle-btn:hover {
            background-color: #c82333;
        }
        
        .finish-puzzle-btn:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container">
        <div class="user-info">
            <span>Welcome, {{ user.username }}!</span>
            <a href="{{ path('app_home') }}" class="back-btn">Back to Puzzles</a>
            <a href="{{ path('app_logout') }}" class="logout-btn">Logout</a>
        </div>
        
        <h1>Word Puzzle Game</h1>
        
        <div class="game-container">
            <div class="puzzle-info">
                <div class="puzzle-title">Puzzle {{ puzzle.id }}</div>
                <div class="puzzle-description">
                    Create words using the letters below.
                </div>
                <div class="letter-pool-display">
                    Available Letters: <span id="letterPoolDisplay">{{ puzzle.letterPool }}</span>
                </div>
            </div>
            
            <div class="game-area">
                <div class="score">Score: <span id="score">0</span></div>
                
                <div class="word-input-section">
                    <input type="text" id="wordInput" class="word-input" placeholder="Type your word here..." maxlength="20">
                    <button id="submitBtn" class="submit-btn">Submit Word</button>
                </div>
                
                <div id="message"></div>
                
                <div class="used-words">
                    <h4>Words Used:</h4>
                    <div id="usedWords"></div>
                </div>
                
                <div class="finish-puzzle-section">
                    <button id="finishPuzzleBtn" class="finish-puzzle-btn">Finish Puzzle</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let availableLetters = [];
        let usedWords = [];
        let score = 0;
        const puzzleId = {{ puzzle.id }};
        const gameId = {{ game_id }};
        
        // Initialize the game
        document.addEventListener('DOMContentLoaded', function() {
            initializeGame();
            setupEventListeners();
        });
        
        function initializeGame() {
            // Parse the letter pool from the server
            const letterPool = '{{ puzzle.letterPool }}';
            availableLetters = letterPool.split('').filter(letter => letter.trim() !== '');
        }
        
        function setupEventListeners() {
            const submitBtn = document.getElementById('submitBtn');
            const wordInput = document.getElementById('wordInput');
            const finishPuzzleBtn = document.getElementById('finishPuzzleBtn');
            
            submitBtn.addEventListener('click', submitWord);
            finishPuzzleBtn.addEventListener('click', finishPuzzle);
            
            wordInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    submitWord();
                }
            });
        }
        
        function submitWord() {
            const wordInput = document.getElementById('wordInput');
            const word = wordInput.value.trim().toLowerCase();
            
            
            // Send AJAX request to validate word
            fetch(`/game/${puzzleId}/submit-word`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    word: word,
                    gameId: gameId,
                    puzzleId: puzzleId,
                    availableLetters: availableLetters.join('')
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Word is valid
                    score += data.points || word.length;
                    document.getElementById('score').textContent = score;
                    
                    // Remove used letters from pool
                    for (let char of word) {
                        const index = availableLetters.indexOf(char);
                        if (index !== -1) {
                            availableLetters.splice(index, 1);
                        }
                    }
                    
                    // Update letter pool display
                    document.getElementById('letterPoolDisplay').textContent = availableLetters.join('');
                    
                    // Add word to used words
                    usedWords.push(word);
                    renderUsedWords();
                    
                    showMessage(`"${word}" is valid! +${data.points || word.length} points`, 'success');
                    wordInput.value = '';
                    
                    // Check if game is over
                    if (availableLetters.length === 0) {
                        showMessage('Congratulations! You used all the letters!', 'success');
                        document.getElementById('submitBtn').disabled = true;
                    }
                } else {
                    showMessage(data.message || 'Invalid word. Try again!', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred. Please try again.', 'error');
            });
        }
        
        function renderUsedWords() {
            const usedWordsElement = document.getElementById('usedWords');
            usedWordsElement.innerHTML = '';
            
            usedWords.forEach(word => {
                const wordElement = document.createElement('span');
                wordElement.className = 'used-word';
                wordElement.textContent = word;
                usedWordsElement.appendChild(wordElement);
            });
        }
        
        function finishPuzzle() {
            const finishPuzzleBtn = document.getElementById('finishPuzzleBtn');
            const submitBtn = document.getElementById('submitBtn');
            const wordInput = document.getElementById('wordInput');
            
            // Disable buttons to prevent further interaction
            finishPuzzleBtn.disabled = true;
            submitBtn.disabled = true;
            wordInput.disabled = true;
            
            // Send AJAX request to finish the puzzle
            fetch(`/game/${puzzleId}/finish`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    gameId: gameId,
                    puzzleId: puzzleId,
                    finalScore: score,
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage(`Puzzle completed! Final score: ${score} points. ${data.message || ''}`, 'success');
                    // Optionally redirect to results page or show final results
                    if (data.redirectUrl) {
                        setTimeout(() => {
                            window.location.href = data.redirectUrl;
                        }, 3000);
                    }
                } else {
                    showMessage(data.message || 'Error finishing puzzle. Please try again.', 'error');
                    // Re-enable buttons if there was an error
                    finishPuzzleBtn.disabled = false;
                    submitBtn.disabled = false;
                    wordInput.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showMessage('An error occurred while finishing the puzzle. Please try again.', 'error');
                // Re-enable buttons if there was an error
                finishPuzzleBtn.disabled = false;
                submitBtn.disabled = false;
                wordInput.disabled = false;
            });
        }
        
        function showMessage(message, type) {
            const messageElement = document.getElementById('message');
            messageElement.textContent = message;
            messageElement.className = `message ${type}`;
            
            // Clear message after 3 seconds
            setTimeout(() => {
                messageElement.textContent = '';
                messageElement.className = 'message';
            }, 3000);
        }
    </script>
{% endblock %} 